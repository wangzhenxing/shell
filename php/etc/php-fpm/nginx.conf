user  work;
worker_processes  auto;

pid        /run/nginx.pid;

events {
    worker_connections  20480;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile       on;
    tcp_nopush     on;
    server_tokens off;

    client_max_body_size 200m;
    keepalive_timeout  65;
    client_body_buffer_size 1m;
    client_header_buffer_size 512k;
    large_client_header_buffers 4 512k;
    fastcgi_buffers  32 8k;

    gzip  on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain  text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;
    
    log_format  json  '{"@timestamp":"$time_iso8601",'
                      '"host":"$server_addr",'
                      '"clientip":"$remote_addr",'
                      '"remote_port":"$remote_port",'
                      '"http_x_forwarded_for":"$http_x_forwarded_for",'
                      '"status":"$status",'
                      '"request_method":"$request_method", '
                      '"request_url": "$request_uri", '
                      '"request_time":$request_time,'
                      '"size":$body_bytes_sent,'
                      '"upstream_time":"$upstream_response_time",'
                      '"upstream_host":"$upstream_addr",'
                      '"server_name":"$host",'
                      '"uri":"$uri",'
                      '"http_referer":"$http_referer",'
                      '"http_user_agent":"$http_user_agent"'
                      '}';

    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/ect/nginx/?.lua";

    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    ';

    log_by_lua '
      local host = ngx.var.host:gsub("^www.", "")
      metric_requests:inc(1, {host, ngx.var.status})
      metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
    ';

    server {
      listen 9145;
      location /metrics {
        content_by_lua 'prometheus:collect()';
        }
    }
    include conf.d/*.conf;
}
